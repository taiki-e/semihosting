[package]
name = "semihosting"
version = "0.1.5" #publish:version
edition = "2021"
rust-version = "1.64"
license = "Apache-2.0 OR MIT"
repository = "https://github.com/taiki-e/semihosting"
keywords = ["qemu"]
categories = ["embedded", "hardware-support", "no-std", "no-std::no-alloc"]
exclude = ["/.*", "/tools", "/target-specs"]
description = """
Semihosting for AArch64, ARM, RISC-V, MIPS, and MIPS64.
"""

[package.metadata.docs.rs]
# NB: sync with env.TEST_FEATURES in .github/workflows/ci.yml
features = ["alloc", "stdio", "fs", "args", "time"]
rustdoc-args = ["--cfg", "semihosting_doc_cfg"]
# Building documentation on any architectures that support ARM semihosting with
# the above cfg will show all APIs with proper doc(cfg).
targets = ["aarch64-unknown-linux-gnu"]

[package.metadata.cargo_check_external_types]
# The following are external types that are allowed to be exposed in our public API.
allowed_external_types = []

[lib]
doc-scrape-examples = false

[features]
# Use `alloc`.
alloc = []

# Enable `semihosting::io::{stdin,stdout,stderr}` and `semihosting::{print*,eprint*,dbg}`.
stdio = []

# Enable `semihosting::fs`.
fs = []

# Enable `semihosting::experimental::env::args`.
#
# Note: This feature is experimental and outside of the normal semver guarantees and
# minor or patch versions of semihosting may make breaking changes to them at any time.
args = []

# Enable `semihosting::experimental::time`.
#
# Note: This feature is experimental and outside of the normal semver guarantees and
# minor or patch versions of semihosting may make breaking changes to them at any time.
time = []

# Provide panic handler based on `semihosting::process::exit`.
#
# If the `stdio` feature is enabled, this attempt to output panic message and
# location to stderr.
panic-handler = []

# Provide `-C panic=unwind` support for panic handler and enable
# `semihosting::experimental::panic::catch_unwind`.
#
# See readme for details.
#
# Note: This feature is experimental and outside of the normal semver guarantees and
# minor or patch versions of semihosting may make breaking changes to them at any time.
panic-unwind = ["alloc", "panic-handler", "unwinding", "unwinding/fde-static", "unwinding/panic", "unwinding/personality"]

# Provide backtrace support for panic handler.
#
# See readme for details.
#
# Note: This feature is experimental and outside of the normal semver guarantees and
# minor or patch versions of semihosting may make breaking changes to them at any time.
backtrace = ["stdio", "unwinding", "unwinding/hide-trace"]

# Use portable-atomic's atomic types.
#
# See readme for details.
portable-atomic = ["dep:portable-atomic"]

[dependencies]
portable-atomic = { version = "1.3", optional = true, default-features = false, features = ["require-cas"] }
unwinding = { version = "0.2", optional = true, default-features = false, features = ["unwinder"] }

[dev-dependencies]

[lints]
workspace = true

[workspace]
resolver = "2"

# This table is shared by projects under https://github.com/taiki-e.
# It is not intended for manual editing.
[workspace.lints.rust]
improper_ctypes = "warn"
improper_ctypes_definitions = "warn"
missing_debug_implementations = "warn"
non_ascii_idents = "warn"
rust_2018_idioms = "warn"
single_use_lifetimes = "warn"
unreachable_pub = "warn"
# unsafe_op_in_unsafe_fn = "warn" # Set at crate-level instead since https://github.com/rust-lang/rust/pull/100081 is not available on MSRV
[workspace.lints.clippy]
all = "warn" # Downgrade deny-by-default lints
pedantic = "warn"
as_ptr_cast_mut = "warn"
default_union_representation = "warn"
inline_asm_x86_att_syntax = "warn"
trailing_empty_array = "warn"
transmute_undefined_repr = "warn"
undocumented_unsafe_blocks = "warn"
# Suppress buggy or noisy clippy lints
bool_assert_comparison = { level = "allow", priority = 1 }
borrow_as_ptr = { level = "allow", priority = 1 } # https://github.com/rust-lang/rust-clippy/issues/8286
doc_markdown = { level = "allow", priority = 1 }
float_cmp = { level = "allow", priority = 1 } # https://github.com/rust-lang/rust-clippy/issues/7725
manual_assert = { level = "allow", priority = 1 }
manual_range_contains = { level = "allow", priority = 1 } # https://github.com/rust-lang/rust-clippy/issues/6455#issuecomment-1225966395
missing_errors_doc = { level = "allow", priority = 1 }
module_name_repetitions = { level = "allow", priority = 1 }
similar_names = { level = "allow", priority = 1 }
single_match = { level = "allow", priority = 1 }
single_match_else = { level = "allow", priority = 1 }
struct_excessive_bools = { level = "allow", priority = 1 }
struct_field_names = { level = "allow", priority = 1 }
too_many_arguments = { level = "allow", priority = 1 }
too_many_lines = { level = "allow", priority = 1 }
type_complexity = { level = "allow", priority = 1 }
